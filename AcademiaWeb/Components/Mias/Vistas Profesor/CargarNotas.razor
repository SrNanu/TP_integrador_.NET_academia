@page "/CargarNotas"
@using AcademiaWeb.Servicios
@inject UsuarioContainer usuarioOnline
@inject CursoContainer cursoSeleccionado
@rendermode InteractiveServer
@using Web.ApiClients

<h3>Cargar Notas de los Alumnos</h3>

<div class="alumnos-list">
    @if (AlumnosInscripcionConNotas.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Nota</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var alumno in AlumnosInscripcionConNotas)
                {
                    <tr>
                        <td>@alumno.NombreAlumno</td>
                        <td>
                            <input type="text" @bind="alumno.Nota" placeholder="Ingrese la nota" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <button class="btn-guardar" @onclick="() => GuardarNotas(AlumnosInscripcionConNotas)">Guardar Notas</button>

        <NavLink href="/MenuDocente" class="btn btn-secondary" active-class="active" aria-label="Crear nuevo usuario" style="background-color: red">
            Volver al menú de usuario
        </NavLink>
    }
    else
    {
        <p>No hay alumnos en este curso.</p>

        <NavLink href="/MenuDocente" class="btn btn-secondary" active-class="active" aria-label="Crear nuevo usuario" style="background-color: red">
            Volver al menú de usuario
        </NavLink>
    }

    @if (!string.IsNullOrEmpty(Message))
    {
        <p class="message">@Message</p>
    }
</div>

@code {
    public List<Usuario> AlumnosInscriptos { get; set; } = new List<Usuario>();
    public List<AlumnoInscripcion> AlumnosInscripcionConNotas { get; set; } = new List<AlumnoInscripcion>();

    public class AlumnoInscripcion
    {
        public int IdAlumno { get; set; }
        public string NombreAlumno { get; set; }
        public int? Nota { get; set; }
    }


    protected override async Task OnInitializedAsync()
    {
        var alumnosInsc = await AlumnoInscripcionApiClient.GetAlumnosInscripcionesByIdCurso(cursoSeleccionado.CursoContenido.Id);

        foreach (var inscripcion in alumnosInsc)
        {
            var alumnoRecuperado = await UsuarioApiClient.GetAsync(inscripcion.IdAlumno);

            //if (alumnoRecuperado != null) // && alumnoRecuperado.Tipo == TiposUsuarios.Alumno)
            if (alumnoRecuperado != null && alumnoRecuperado.Tipo == TiposUsuarios.Alumno)
            {
                AlumnosInscripcionConNotas.Add(new AlumnoInscripcion
                    {
                        IdAlumno = alumnoRecuperado.Id,
                        NombreAlumno = string.Concat(alumnoRecuperado.Nombre, " ", alumnoRecuperado.Apellido),
                        Nota = null
                    });
            }
        }
    }

    public async Task GuardarNotas(List<AlumnoInscripcion> alumnosInscripcionConNotas)
    {
        foreach (var inscripcion in alumnosInscripcionConNotas)
        {
            var inscripcionesAlumno = await AlumnoInscripcionApiClient.GetAlumnosInscripcionesByIdUsuario(inscripcion.IdAlumno);
            var inscripcionEnCurso = inscripcionesAlumno?.FirstOrDefault(i => i.IdCurso == cursoSeleccionado.CursoContenido.Id);

            if (inscripcionEnCurso != null)
            {
                inscripcionEnCurso.Nota = inscripcion.Nota;
                await AlumnoInscripcionApiClient.UpdateAsync(inscripcionEnCurso);
            }
        }

        Message = "Las notas han sido guardadas correctamente.";
    }

    public string Message { get; set; }
}


<style>
    body {
        font-family: 'Arial', sans-serif;
        background-color: #f9f9f9;
        margin: 0;
        padding: 0;
    }

    h3 {
        text-align: center;
        color: #333;
        margin-top: 20px;
    }

    .alumnos-list {
        width: 70%;
        margin: 20px auto;
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .table {
        width: 100%;
        margin-bottom: 20px;
        border-collapse: collapse;
    }

        .table th, .table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .table th {
            background-color: #f2f2f2;
        }

    .btn-guardar {
        width: 100%;
        padding: 12px;
        background-color: #4CAF50;
        color: white;
        border: none;
        font-size: 16px;
        cursor: pointer;
        border-radius: 4px;
    }

        .btn-guardar:hover {
            background-color: #45a049;
        }

    .message {
        margin-top: 20px;
        padding: 10px;
        background-color: #e7f7e7;
        color: #4CAF50;
        border-radius: 4px;
        text-align: center;
        font-size: 16px;
    }
</style>

